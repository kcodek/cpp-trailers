cmake_minimum_required(VERSION 3.10 FATAL_ERROR)  # Specify the minimum version for CMake
project(app) # Project's name

enable_testing()

# The following folder will be included
# include_directories("${PROJECT_SOURCE_DIR}")
include_directories(${CMAKE_CURRENT_SOURCE_DIR})

# set(SOURCE hello.cpp SOLID/ocp.cpp SOLID/srp.cpp SOLID/lsp.cpp SOLID/isp.cpp SOLID/dip.cpp ) # add more files
set(CMAKE_CXX_FLAGS "-Wall -std=c++14 -DCXX11")
# set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /std:c++17") #warning: decomposition declarations are a C++1z extension [-Wc++1z-extensions]


add_subdirectory(randomnumgen)
add_subdirectory(callbacktimer)


# add_executable(${PROJECT_NAME} ${SOURCE})
add_executable(${PROJECT_NAME} main.cpp)
target_link_libraries(${PROJECT_NAME} librandomnumgen libcallbacktimer)


# sets GTEST_INCLUDE_DIRS and GTEST_LIBRARIES
find_package( GTest REQUIRED )      

# adds the gtest include directory
include_directories( ${GTEST_INCLUDE_DIRS} )

# links gtest
target_link_libraries( ${PROJECT_NAME}  ${GTEST_LIBRARIES} )

# Set the output folder where your program will be created
set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/bin)
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})
set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR})











##############################################################









# # set(CMAKE_LEGACY_CYGWIN_WIN32 0)

# project("multithread-app")

# list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/Modules)

# enable_testing()
# include(gmock)

# if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU" OR
#     "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
#     set(warnings "-Wall -Wextra -Werror")
# elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
#     set(warnings "/W4 /WX /EHsc")
# endif()


# if (NOT CONFIGURED_ONCE)
#     set(CMAKE_CXX_FLAGS "${warnings}"
#         CACHE STRING "Flags used by the compiler during all build types." FORCE)
#     set(CMAKE_C_FLAGS   "${warnings}"
#         CACHE STRING "Flags used by the compiler during all build types." FORCE)
# endif()

# include_directories(${CMAKE_CURRENT_SOURCE_DIR}) 
# # add_subdirectory(ToDoCore)

# add_executable(toDo main.cpp)
# # target_link_libraries(toDo toDoCore)

# add_test(toDoTest toDo)

# set(CONFIGURED_ONCE TRUE CACHE INTERNAL
#     "A flag showing that CMake has configured at least once.")

